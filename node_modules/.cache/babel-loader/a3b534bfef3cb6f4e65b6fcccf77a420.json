{"ast":null,"code":"var _jsxFileName = \"/Users/john/covid-19-tracker/src/LineGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from 'numeral';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      time: {\n        format: \"MM/DD/YY\",\n        totaltipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        //include a dollar sign in the ticks\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[casesType][date];\n  }\n\n  return chartData;\n};\n\nfunction LineGraph(_ref) {\n  _s();\n\n  let {\n    casesType = \"cases\"\n  } = _ref;\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\").then(response => {\n        return response.json();\n      }).then(data => {\n        let chartData = buildChartData(data, casesType);\n        setData(chartData);\n      });\n    };\n\n    fetchData();\n  }, [casesType]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: (data === null || data === void 0 ? void 0 : data.length) > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      options: options,\n      data: {\n        datasets: [{\n          backgroundColor: \"rgba(204, 16, 52, 0,5)\",\n          borderColor: \"#CC1034\",\n          data: data\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LineGraph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = LineGraph;\nexport default LineGraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineGraph\");","map":{"version":3,"sources":["/Users/john/covid-19-tracker/src/LineGraph.js"],"names":["React","useState","useEffect","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","time","totaltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","chartData","lastDataPoint","date","cases","newDataPoint","x","y","push","LineGraph","setData","fetchData","fetch","then","response","json","length","datasets","backgroundColor","borderColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport numeral from 'numeral';\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false, \n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    totaltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    //include a dollar sign in the ticks\n                    callback: function(value, index, values){\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n}\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n\n    let lastDataPoint;\n    for(let date in data.cases) {\n        if(lastDataPoint) {\n            let newDataPoint = {\n                x:date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n} \n\nfunction LineGraph({ casesType = \"cases\" }) {\n\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async() => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n            .then((response) => {\n               return response.json();\n            })\n            .then((data) => {\n                let chartData = buildChartData(data, casesType);\n                setData(chartData);\n            });\n        }\n        fetchData();\n    }, [casesType]);\n    return (\n        <div>\n        {data?.length > 0 &&  (\n           <Line \n           options = {options}\n           data = { {\n               datasets: [\n                   {\n                       backgroundColor: \"rgba(204, 16, 52, 0,5)\",\n                       borderColor: \"#CC1034\",\n                       data: data,\n                   },\n               ],\n           }} /> \n        )\n        }\n        </div>\n    )\n}\n\nexport default LineGraph;\n"]},"metadata":{},"sourceType":"module"}